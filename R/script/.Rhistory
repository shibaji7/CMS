}
aaic = mean(aic)
bbic = mean(bic)
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
print(I)
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:i])
colnames(newX_train) <- names(xy)[1:i]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:i])
colnames(newX_train) <- names(xy)[1:i]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
print(i)
newX_train <- data.frame(xy_test[,1:i])
colnames(newX_train) <- names(xy)[1:i]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
print(k)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
View(LL_test)
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 3
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[i] = mean(log_los_train)
ZO_train[i] = mean(zero_one_train)
LL_test[i] = mean(log_los_test)
ZO_test[i] = mean(zero_one_test)
form <- paste0(form,'+')
}
mean(log_los_train)
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 3
aaic <- rep(NA, N)
bbic <- rep(NA, N)
LL_train <- rep(NA, N)
ZO_train <- rep(NA, N)
LL_test <- rep(NA, N)
ZO_test <- rep(NA, N)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[k] = mean(log_los_train)
ZO_train[k] = mean(zero_one_train)
LL_test[k] = mean(log_los_test)
ZO_test[k] = mean(zero_one_test)
form <- paste0(form,'+')
}
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 3
aaic <- rep(NA, P)
bbic <- rep(NA, P)
LL_train <- rep(NA, P)
ZO_train <- rep(NA, P)
LL_test <- rep(NA, P)
ZO_test <- rep(NA, P)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[k] = mean(log_los_train)
ZO_train[k] = mean(zero_one_train)
LL_test[k] = mean(log_los_test)
ZO_test[k] = mean(zero_one_test)
form <- paste0(form,'+')
}
par(mfrow=c(1,2))
plot(1:P,aaic*max(LL_train)/max(aaic),xlim=c(1,N),
xlab='Basis Function', ylab='Log-likelihood', lty = 1)
points(1:P,LL_train,type='l', col = 'blue', lty=2)
points(1:P,LL_test,pch=19, col = "red", lty=3)
plot(1:P,bbic*max(ZO_train)/max(bbic),xlim=c(1,N),
xlab='Basis Function', ylab='Log-likelihood', lty = 1)
points(1:P,ZO_train,type='l', col = 'blue', lty=2)
points(1:P,ZO_test,pch=19, col = "red", lty=3)
rm(list = ls())
# Train and test data
gen_data <- function(D, I) {
xy_train <- D[-I,]
xy_test  <- D[I,]
return(list(train=xy_train,test=xy_test))
}
library(ElemStatLearn)
library(MLmetrics)
XY <- phoneme[phoneme$g=='ao' | phoneme$g=='iy',]
XY$y <- ifelse(XY$g=='ao',1,0)
xy <- XY[-c(257:258)]
N = 2185
P = 50
aaic <- rep(NA, P)
bbic <- rep(NA, P)
LL_train <- rep(NA, P)
ZO_train <- rep(NA, P)
LL_test <- rep(NA, P)
ZO_test <- rep(NA, P)
form = 'y~'
for(k in 1:P){
form <- paste0(form,'x.',toString(k))
print(form)
aic <- rep(NA, N)
bic <- rep(NA, N)
log_los_train <- rep(NA, N)
zero_one_train <- rep(NA, N)
log_los_test <- rep(NA, N)
zero_one_test <- rep(NA, N)
for(i in 1:N){
d <- gen_data(xy,i)
xy_train <- d$train
xy_test <- d$train
model <- glm(formula = form, data = xy_train, family = binomial(link="logit"))
aic[i] <- AIC(model)
bic[i] <- BIC(model)
log_los_train[i] <- LogLoss(y_pred = model$fitted.values, y_true = xy_train$y)
zero_one_train[i] <- ZeroOneLoss(y_pred = ifelse(model$fitted.values < 0.5, 0, 1),
y_true = xy_train$y)
newX_train <- data.frame(xy_test[,1:k])
colnames(newX_train) <- names(xy)[1:k]
y_pred_test <- predict(model, newX_train, "response")
log_los_test[i] <- LogLoss(y_pred = y_pred_test, y_true = xy_test$y)
zero_one_test[i] <- ZeroOneLoss(y_pred = ifelse(y_pred_test < 0.5, 0, 1),
y_true = xy_test$y)
}
aaic[k] = mean(aic)
bbic[k] = mean(bic)
LL_train[k] = mean(log_los_train)
ZO_train[k] = mean(zero_one_train)
LL_test[k] = mean(log_los_test)
ZO_test[k] = mean(zero_one_test)
form <- paste0(form,'+')
}
